// This file is generated by kconfig_compiler from generictable.kcfg.
// All changes you do to this file will be lost.

#include "generictable.h"

#include <kstaticdeleter.h>

GenericTableConfig *GenericTableConfig::mSelf = 0;
static KStaticDeleter<GenericTableConfig> staticGenericTableConfigDeleter;

GenericTableConfig *GenericTableConfig::self()
{
  if ( !mSelf ) {
    staticGenericTableConfigDeleter.setObject( mSelf, new GenericTableConfig() );
    mSelf->readConfig();
  }

  return mSelf;
}

GenericTableConfig::GenericTableConfig(  )
  : KConfigSkeleton( QString::fromLatin1( "skimrc" ) )
{
  mSelf = this;
  setCurrentGroup( QString::fromLatin1( "SCIM" ) );

  KConfigSkeleton::ItemBool  *item_IMEngine_Table_ShowPrompt;
  item_IMEngine_Table_ShowPrompt = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "/IMEngine/Table/ShowPrompt" ), m_IMEngine_Table_ShowPrompt, false );
  addItem( item_IMEngine_Table_ShowPrompt, QString::fromLatin1( "_IMEngine_Table_ShowPrompt" ) );
  KConfigSkeleton::ItemBool  *item_IMEngine_Table_ShowKeyHint;
  item_IMEngine_Table_ShowKeyHint = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "/IMEngine/Table/ShowKeyHint" ), m_IMEngine_Table_ShowKeyHint, false );
  addItem( item_IMEngine_Table_ShowKeyHint, QString::fromLatin1( "_IMEngine_Table_ShowKeyHint" ) );
  KConfigSkeleton::ItemBool  *item_IMEngine_Table_UserTableBinary;
  item_IMEngine_Table_UserTableBinary = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "/IMEngine/Table/UserTableBinary" ), m_IMEngine_Table_UserTableBinary, false );
  addItem( item_IMEngine_Table_UserTableBinary, QString::fromLatin1( "_IMEngine_Table_UserTableBinary" ) );
  KConfigSkeleton::ItemBool  *item_IMEngine_Table_UserPhraseFirst;
  item_IMEngine_Table_UserPhraseFirst = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "/IMEngine/Table/UserPhraseFirst" ), m_IMEngine_Table_UserPhraseFirst, false );
  addItem( item_IMEngine_Table_UserPhraseFirst, QString::fromLatin1( "_IMEngine_Table_UserPhraseFirst" ) );
  KConfigSkeleton::ItemBool  *item_IMEngine_Table_LongPhraseFirst;
  item_IMEngine_Table_LongPhraseFirst = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "/IMEngine/Table/LongPhraseFirst" ), m_IMEngine_Table_LongPhraseFirst, false );
  addItem( item_IMEngine_Table_LongPhraseFirst, QString::fromLatin1( "_IMEngine_Table_LongPhraseFirst" ) );
  KConfigSkeleton::ItemString  *item_IMEngine_Table_FullWidthPunctKey;
  item_IMEngine_Table_FullWidthPunctKey = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "/IMEngine/Table/FullWidthPunctKey" ), m_IMEngine_Table_FullWidthPunctKey, QString::fromLatin1( "Control+period" ) );
  addItem( item_IMEngine_Table_FullWidthPunctKey, QString::fromLatin1( "_IMEngine_Table_FullWidthPunctKey" ) );
  KConfigSkeleton::ItemString  *item_IMEngine_Table_FullWidthLetterKey;
  item_IMEngine_Table_FullWidthLetterKey = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "/IMEngine/Table/FullWidthLetterKey" ), m_IMEngine_Table_FullWidthLetterKey, QString::fromLatin1( "Shift+space" ) );
  addItem( item_IMEngine_Table_FullWidthLetterKey, QString::fromLatin1( "_IMEngine_Table_FullWidthLetterKey" ) );
  KConfigSkeleton::ItemString  *item_IMEngine_Table_ModeSwitchKey;
  item_IMEngine_Table_ModeSwitchKey = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "/IMEngine/Table/ModeSwitchKey" ), m_IMEngine_Table_ModeSwitchKey, QString::fromLatin1( "Alt+Shift_L,Alt+Shift_R,Shift+Shift_L+KeyRelease,Shift+Shift_R+KeyRelease" ) );
  addItem( item_IMEngine_Table_ModeSwitchKey, QString::fromLatin1( "_IMEngine_Table_ModeSwitchKey" ) );
  KConfigSkeleton::ItemString  *item_IMEngine_Table_AddPhraseKey;
  item_IMEngine_Table_AddPhraseKey = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "/IMEngine/Table/AddPhraseKey" ), m_IMEngine_Table_AddPhraseKey, QString::fromLatin1( "Control+a,Control+equal" ) );
  addItem( item_IMEngine_Table_AddPhraseKey, QString::fromLatin1( "_IMEngine_Table_AddPhraseKey" ) );
  KConfigSkeleton::ItemString  *item_IMEngine_Table_DeletePhraseKey;
  item_IMEngine_Table_DeletePhraseKey = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "/IMEngine/Table/DeletePhraseKey" ), m_IMEngine_Table_DeletePhraseKey, QString::fromLatin1( "Control+d,Control+minus" ) );
  addItem( item_IMEngine_Table_DeletePhraseKey, QString::fromLatin1( "_IMEngine_Table_DeletePhraseKey" ) );
}

GenericTableConfig::~GenericTableConfig()
{
  if ( mSelf == this )
    staticGenericTableConfigDeleter.setObject( mSelf, 0, false );
}

