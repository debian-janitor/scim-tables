// This file is generated by kconfig_compiler from generictable.kcfg.
// All changes you do to this file will be lost.
#ifndef GENERICTABLECONFIG_H
#define GENERICTABLECONFIG_H

#include <kconfigskeleton.h>
#include <kdebug.h>

class GenericTableConfig : public KConfigSkeleton
{
  public:

    static GenericTableConfig *self();
    ~GenericTableConfig();


    /**
      Get show prompt in table server
    */
    static
    bool _IMEngine_Table_ShowPrompt()
    {
      return self()->m_IMEngine_Table_ShowPrompt;
    }


    /**
      Get show key hint in table server
    */
    static
    bool _IMEngine_Table_ShowKeyHint()
    {
      return self()->m_IMEngine_Table_ShowKeyHint;
    }


    /**
      Get user table is in binary format
    */
    static
    bool _IMEngine_Table_UserTableBinary()
    {
      return self()->m_IMEngine_Table_UserTableBinary;
    }


    /**
      Get user defined phrases first
    */
    static
    bool _IMEngine_Table_UserPhraseFirst()
    {
      return self()->m_IMEngine_Table_UserPhraseFirst;
    }


    /**
      Get longer phrases first
    */
    static
    bool _IMEngine_Table_LongPhraseFirst()
    {
      return self()->m_IMEngine_Table_LongPhraseFirst;
    }


    /**
      Get shortcut for toggle punctuation width
    */
    static
    QString _IMEngine_Table_FullWidthPunctKey()
    {
      return self()->m_IMEngine_Table_FullWidthPunctKey;
    }


    /**
      Get shortcut for toggle letter width
    */
    static
    QString _IMEngine_Table_FullWidthLetterKey()
    {
      return self()->m_IMEngine_Table_FullWidthLetterKey;
    }


    /**
      Get shortcut for mode switch
    */
    static
    QString _IMEngine_Table_ModeSwitchKey()
    {
      return self()->m_IMEngine_Table_ModeSwitchKey;
    }


    /**
      Get shortcut for adding phrase
    */
    static
    QString _IMEngine_Table_AddPhraseKey()
    {
      return self()->m_IMEngine_Table_AddPhraseKey;
    }


    /**
      Get shortcut for deleting phrase
    */
    static
    QString _IMEngine_Table_DeletePhraseKey()
    {
      return self()->m_IMEngine_Table_DeletePhraseKey;
    }

    static
    void writeConfig()
    {
      static_cast<KConfigSkeleton*>(self())->writeConfig();
    }
  protected:
    GenericTableConfig();
    static GenericTableConfig *mSelf;


    // SCIM
    bool m_IMEngine_Table_ShowPrompt;
    bool m_IMEngine_Table_ShowKeyHint;
    bool m_IMEngine_Table_UserTableBinary;
    bool m_IMEngine_Table_UserPhraseFirst;
    bool m_IMEngine_Table_LongPhraseFirst;
    QString m_IMEngine_Table_FullWidthPunctKey;
    QString m_IMEngine_Table_FullWidthLetterKey;
    QString m_IMEngine_Table_ModeSwitchKey;
    QString m_IMEngine_Table_AddPhraseKey;
    QString m_IMEngine_Table_DeletePhraseKey;

  private:
};

#endif

